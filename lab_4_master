/*
 * File:   main_lab2.c
 * Author: Arevalo
 *
 * Created on 2 de febrero de 2020, 09:29 AM
 */


// PIC16F887 Configuration Bit Settings

// 'C' source line config statements

// CONFIG1
#pragma config FOSC = INTRC_NOCLKOUT// Oscillator Selection bits (INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O function on RA7/OSC1/CLKIN)
#pragma config WDTE = OFF       // Watchdog Timer Enable bit (WDT disabled and can be enabled by SWDTEN bit of the WDTCON register)
#pragma config PWRTE = OFF      // Power-up Timer Enable bit (PWRT disabled)
#pragma config MCLRE = OFF      // RE3/MCLR pin function select bit (RE3/MCLR pin function is digital input, MCLR internally tied to VDD)
#pragma config CP = OFF         // Code Protection bit (Program memory code protection is disabled)
#pragma config CPD = OFF        // Data Code Protection bit (Data memory code protection is disabled)
#pragma config BOREN = OFF      // Brown Out Reset Selection bits (BOR disabled)
#pragma config IESO = OFF       // Internal External Switchover bit (Internal/External Switchover mode is disabled)
#pragma config FCMEN = OFF      // Fail-Safe Clock Monitor Enabled bit (Fail-Safe Clock Monitor is disabled)
#pragma config LVP = OFF        // Low Voltage Programming Enable bit (RB3 pin has digital I/O, HV on MCLR must be used for programming)

// CONFIG2
#pragma config BOR4V = BOR40V   // Brown-out Reset Selection bit (Brown-out Reset set to 4.0V)
#pragma config WRT = OFF        // Flash Program Memory Self Write Enable bits (Write protection off)

// #pragma config statements should precede project file includes.
// Use project enums instead of #define for ON and OFF.

#include <xc.h>
#include <pic16f887.h>
#include <stdint.h>
#include "ADC.h"
#include "USART.h"

#define _XTAL_FREQ 4000000

//uint8_t cont = 0;

void init(void);
void inter_init(void);

void __interrupt() inter (void){
    //interrupción comunicación USART
    if (PIR1bits.RCIF == 1){
        if(RCSTAbits.OERR==1){
            RCSTAbits.CREN = 0;
            __delay_us(255);
        }
        else{
            PORTB = RCREG; //escribe el valor del contador en los LEDS
        }
    }
}

void main(void) {
    init();
    inter_init();
    spi_conf(1);
    transmision_conf();
    //char cont = 0;
    uint8_t badc = 1;
    char adc1 = 0;
    char adc2 = 0;
    SSPBUF = 0x01;
    while(1){
        //lectura del maestro al ADC del esclvo por SPI
        if (badc == 1 && spi_puede_leer() == 1){
            adc1 = spi_leer();
            badc = 2;
            SSPBUF = 0x02;
        }
        else if (badc == 2 && spi_puede_leer() == 1){
            adc2 = spi_leer();
            badc = 1;
            SSPBUF = 0x01;
        }
        
        //transmision de los resultados del ADC a la computadora
        transmitir(adc1);
        transmitir(adc2);
 
    }
    return;
}

void init(void){
    TRISB = 0x00;
    ANSEL = 0x00;
    ANSELH = 0x00;
    TRISCbits.TRISC7 = 1;
    TRISCbits.TRISC6 = 0;
    recepcion_conf();
}

void inter_init(void){
    INTCONbits.GIE = 1;
    INTCONbits.PEIE = 1;
    PIE1bits.RCIE = 1;    
}
